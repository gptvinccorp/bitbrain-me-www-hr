
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { Resend } from "npm:resend@2.0.0";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface EmailRequest {
  name: string;
  email: string;
  score: number;
  track: string;
  moduleScores: any;
}

const generateRecommendations = (score: number, moduleScores: any): string[] => {
  const recommendations: string[] = [];

  if (score >= 8) {
    recommendations.push('–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.');
    recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.');
  } else if (score >= 6) {
    recommendations.push('–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞.');
    recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ –æ–±–ª–∞—Å—Ç—è—Ö —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏.');
  } else {
    recommendations.push('–ï—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.');
    recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.');
  }

  if (moduleScores) {
    Object.entries(moduleScores).forEach(([module, score]: [string, any]) => {
      if (score < 5) {
        switch (module) {
          case 'systematic':
            recommendations.push('–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.');
            break;
          case 'attention':
            recommendations.push('–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.');
            break;
          case 'capacity':
            recommendations.push('–£–ª—É—á—à–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏ —Ä–∞–±–æ—Ç—ã –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º.');
            break;
          case 'honesty':
            recommendations.push('–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —ç—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ.');
            break;
          case 'growth':
            recommendations.push('–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞ —Ä–æ—Å—Ç –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é.');
            break;
          case 'team':
            recommendations.push('–£–ª—É—á—à–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.');
            break;
          case 'adaptability':
            recommendations.push('–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é.');
            break;
          case 'creativity':
            recommendations.push('–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.');
            break;
        }
      }
    });
  }

  return recommendations.slice(0, 4);
};

const handler = async (req: Request): Promise<Response> => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { name, email, score, track, moduleScores }: EmailRequest = await req.json();

    console.log('=== EMAIL SENDING ATTEMPT ===');
    console.log('Recipient:', email);
    console.log('Score:', score);
    console.log('Track:', track);
    console.log('RESEND_API_KEY exists:', !!Deno.env.get("RESEND_API_KEY"));

    const recommendations = generateRecommendations(score, moduleScores);
    
    const trackNames = {
      'sales': '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂',
      'academy': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∞–∫–∞–¥–µ–º–∏—è',
      'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª'
    };

    const trackName = trackNames[track as keyof typeof trackNames] || track;

    console.log('Attempting to send email via Resend...');

    const emailResponse = await resend.emails.send({
      from: "Web3 Media Agency <noreply@bitbrain.me>",
      to: [email],
      subject: "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - Web3 Media Agency",
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #2563eb; color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }
            .content { background-color: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }
            .score-box { background-color: #dbeafe; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0; }
            .score { font-size: 2em; font-weight: bold; color: #2563eb; }
            .recommendations { background-color: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0; }
            .recommendation { margin: 10px 0; padding-left: 20px; position: relative; }
            .recommendation:before { content: "‚Ä¢"; color: #10b981; font-weight: bold; position: absolute; left: 0; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 0.9em; color: #6b7280; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Web3 Media Agency</h1>
            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
          </div>
          
          <div class="content">
            <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</h2>
            
            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ "<strong>${trackName}</strong>".</p>
            
            <div class="score-box">
              <div class="score">${score}/10</div>
              <p>–í–∞—à –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</p>
            </div>
            
            <div class="recommendations">
              <h3>üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
              ${recommendations.map(rec => `<div class="recommendation">${rec}</div>`).join('')}
            </div>
            
            <p>–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤.</p>
            
            <div class="footer">
              <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
              <strong>–ö–æ–º–∞–Ω–¥–∞ Web3 Media Agency</strong></p>
              
              <p><em>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.</em></p>
              
              <hr style="margin: 20px 0;">
              <p style="font-size: 12px; color: #9ca3af;">
                –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toISOString()}<br>
                –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${email}
              </p>
            </div>
          </div>
        </body>
        </html>
      `,
    });

    console.log("=== RESEND RESPONSE ===");
    console.log("Full response:", JSON.stringify(emailResponse, null, 2));

    if (emailResponse.error) {
      console.error("=== RESEND ERROR ===");
      console.error("Error details:", emailResponse.error);
      
      return new Response(JSON.stringify({ 
        success: false, 
        error: emailResponse.error,
        details: "Resend API returned an error"
      }), {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
        },
      });
    }

    console.log("=== EMAIL SENT SUCCESSFULLY ===");
    console.log("Message ID:", emailResponse.data?.id);

    return new Response(JSON.stringify({ 
      success: true, 
      messageId: emailResponse.data?.id,
      recipient: email,
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });
  } catch (error: any) {
    console.error("=== FUNCTION ERROR ===");
    console.error("Error type:", typeof error);
    console.error("Error message:", error.message);
    console.error("Error stack:", error.stack);
    
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message,
        details: "Edge function encountered an error"
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);
